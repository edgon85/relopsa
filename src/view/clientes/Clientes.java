/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.clientes;

import connection.DBConnection;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.ModelUniversal;
import view.proveedor.Proveedores;

/**
 *
 * @author gonza
 */
public class Clientes extends javax.swing.JInternalFrame {

    ModelUniversal modelUniversal = new ModelUniversal();
    private TableRowSorter trsFiltro;
    
    
    public Clientes() {
        initComponents();
        this.setTitle("Datos Cliente");
        txtIdCliente.setVisible(false);
        txtNumClientes.requestFocus();
        txtNumClientes.setEditable(false);
        txtFiltroClientes.setText("");
        txtFiltroClientes.setPrompt("buscar");
    
        bloquearBotones();
        btnNuevoCliente.setEnabled(true);
        
        listarDatos();
        dobleClickTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupClientes = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtNitCliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNombreCliente = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtApellidoCliente = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDireccionCliente = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtCorreoCliente = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtTelCliente = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObservacionesCliente = new javax.swing.JTextArea();
        txtIdCliente = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        btnNuevoCliente = new javax.swing.JButton();
        btnGuardarCliente = new javax.swing.JButton();
        btnEditarCliente = new javax.swing.JButton();
        btnEliminarCliente = new javax.swing.JButton();
        btnCaancelarCliente = new javax.swing.JButton();
        txtFiltroClientes = new org.jdesktop.swingx.JXSearchField();
        jLabel9 = new javax.swing.JLabel();
        txtNumClientes = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableClientes = new javax.swing.JTable();
        radioButtonNit = new javax.swing.JRadioButton();
        radioButtonNombre = new javax.swing.JRadioButton();

        setClosable(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("NIT:");

        txtNitCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNitClienteFocusLost(evt);
            }
        });

        jLabel3.setText("Nombres:");

        txtNombreCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNombreClienteFocusLost(evt);
            }
        });

        jLabel4.setText("Apellidos:");

        txtApellidoCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtApellidoClienteFocusLost(evt);
            }
        });

        jLabel5.setText("Direccion:");

        jLabel6.setText("Correo:");

        txtCorreoCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCorreoClienteFocusLost(evt);
            }
        });

        jLabel7.setText("Tel√©fono:");

        jLabel8.setText("Observaciones:");

        txtObservacionesCliente.setColumns(20);
        txtObservacionesCliente.setRows(5);
        jScrollPane1.setViewportView(txtObservacionesCliente);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDireccionCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtApellidoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCorreoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNitCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtTelCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNombreCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtTelCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtIdCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel8)
                            .addComponent(txtApellidoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtNitCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtDireccionCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtCorreoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 760, 180));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnNuevoCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/buttonNuevo.png"))); // NOI18N
        btnNuevoCliente.setBorder(null);
        btnNuevoCliente.setBorderPainted(false);
        btnNuevoCliente.setContentAreaFilled(false);
        btnNuevoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoClienteActionPerformed(evt);
            }
        });
        jPanel3.add(btnNuevoCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        btnGuardarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/buttonGuardar.png"))); // NOI18N
        btnGuardarCliente.setBorder(null);
        btnGuardarCliente.setBorderPainted(false);
        btnGuardarCliente.setContentAreaFilled(false);
        btnGuardarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarClienteActionPerformed(evt);
            }
        });
        jPanel3.add(btnGuardarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, -1, -1));

        btnEditarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/buttonModificar.png"))); // NOI18N
        btnEditarCliente.setBorder(null);
        btnEditarCliente.setBorderPainted(false);
        btnEditarCliente.setContentAreaFilled(false);
        btnEditarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarClienteActionPerformed(evt);
            }
        });
        jPanel3.add(btnEditarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, -1, 30));

        btnEliminarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/buttonEliminar.png"))); // NOI18N
        btnEliminarCliente.setBorder(null);
        btnEliminarCliente.setBorderPainted(false);
        btnEliminarCliente.setContentAreaFilled(false);
        btnEliminarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarClienteActionPerformed(evt);
            }
        });
        jPanel3.add(btnEliminarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 10, -1, -1));

        btnCaancelarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/buttonCancelar.png"))); // NOI18N
        btnCaancelarCliente.setBorder(null);
        btnCaancelarCliente.setBorderPainted(false);
        btnCaancelarCliente.setContentAreaFilled(false);
        btnCaancelarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaancelarClienteActionPerformed(evt);
            }
        });
        jPanel3.add(btnCaancelarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, -1, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 760, 60));

        txtFiltroClientes.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtFiltroClientes.setText("Buscar");
        txtFiltroClientes.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFiltroClientesKeyTyped(evt);
            }
        });
        jPanel1.add(txtFiltroClientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 270, 210, -1));

        jLabel9.setText("Cantidad de clientes");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 280, -1, -1));
        jPanel1.add(txtNumClientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 270, 30, 30));

        tableClientes = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        tableClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableClientes.setFocusable(false);
        jScrollPane2.setViewportView(tableClientes);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, 760, 210));

        radioButtonNit.setText("Nit");
        jPanel1.add(radioButtonNit, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 270, -1, -1));

        radioButtonNombre.setText("Nombre");
        jPanel1.add(radioButtonNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 270, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoClienteActionPerformed
        desbloquearBotones();
        btnNuevoCliente.setEnabled(false);
        btnEditarCliente.setEnabled(false);
        btnEliminarCliente.setEnabled(false);
        txtNombreCliente.requestFocus();
    }//GEN-LAST:event_btnNuevoClienteActionPerformed

    private void btnCaancelarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaancelarClienteActionPerformed
        limpiarCampos();
        bloquearBotones();
        txtNumClientes.requestFocus();
      
    }//GEN-LAST:event_btnCaancelarClienteActionPerformed

    private void btnGuardarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarClienteActionPerformed
        guardarCliente();
    }//GEN-LAST:event_btnGuardarClienteActionPerformed

    private void txtNitClienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNitClienteFocusLost
        if(txtNitCliente.getText().equals("C/F") || txtNitCliente.getText().equals("")){
            txtNitCliente.setText("C/F");
        }else{
            modelUniversal.validarDatosRepetidos(txtNitCliente, tableClientes, 3, "Nit");
        }
    }//GEN-LAST:event_txtNitClienteFocusLost

    private void txtNombreClienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNombreClienteFocusLost
        txtApellidoCliente.requestFocus();
    }//GEN-LAST:event_txtNombreClienteFocusLost

    private void txtApellidoClienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtApellidoClienteFocusLost
        txtNitCliente.requestFocus();
    }//GEN-LAST:event_txtApellidoClienteFocusLost

    private void txtCorreoClienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCorreoClienteFocusLost
        if(txtCorreoCliente.getText().equals("")){
            txtCorreoCliente.setText("");
            
        }else{
            modelUniversal.validarDatosRepetidos(txtCorreoCliente, tableClientes, 5, "Correo");
        }
        txtTelCliente.requestFocus();
    }//GEN-LAST:event_txtCorreoClienteFocusLost

    private void btnEditarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarClienteActionPerformed
        editarDatos();
    }//GEN-LAST:event_btnEditarClienteActionPerformed

    private void btnEliminarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarClienteActionPerformed
        eliminarDatos();
    }//GEN-LAST:event_btnEliminarClienteActionPerformed

    private void txtFiltroClientesKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroClientesKeyTyped
        buscar();
    }//GEN-LAST:event_txtFiltroClientesKeyTyped


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCaancelarCliente;
    private javax.swing.JButton btnEditarCliente;
    private javax.swing.JButton btnEliminarCliente;
    private javax.swing.JButton btnGuardarCliente;
    private javax.swing.JButton btnNuevoCliente;
    private javax.swing.ButtonGroup buttonGroupClientes;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton radioButtonNit;
    private javax.swing.JRadioButton radioButtonNombre;
    private javax.swing.JTable tableClientes;
    private javax.swing.JTextField txtApellidoCliente;
    private javax.swing.JTextField txtCorreoCliente;
    private javax.swing.JTextField txtDireccionCliente;
    private org.jdesktop.swingx.JXSearchField txtFiltroClientes;
    private javax.swing.JTextField txtIdCliente;
    private javax.swing.JTextField txtNitCliente;
    private javax.swing.JTextField txtNombreCliente;
    private javax.swing.JTextField txtNumClientes;
    private javax.swing.JTextArea txtObservacionesCliente;
    private javax.swing.JTextField txtTelCliente;
    // End of variables declaration//GEN-END:variables

    //-----------Guardar------------------------------    
    private void guardarCliente(){ 
        DBConnection conGuardar = new DBConnection();
        
        if(txtNombreCliente.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Ingrese Nombre", "Advertencia", JOptionPane.ERROR_MESSAGE);
            this.txtNombreCliente.requestFocus();
        }else if(txtApellidoCliente.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Ingrese Apellido", "Advertencia", JOptionPane.ERROR_MESSAGE);
            this.txtApellidoCliente.requestFocus();    
        /*}else if(!txtNitCliente.getText().equals("")){
            modelUniversal.validarDatosRepetidos(txtNitCliente, tableClientes, 3, "Nit");
        }else if(!txtCorreoCliente.getText().equals("")){
            modelUniversal.validarDatosRepetidos(txtCorreoCliente, tableClientes, 5, "Correo");
        */}
        else{      
           try {
                //String querty = "INSERT INTO relopsa.proveedores (nombre, direccion, correo, telefono, observaciones) VALUES (?,?,?,?,?)";
                String querty = "{call insertarClientes(?,?,?,?,?,?,?)}";
                PreparedStatement statement = conGuardar.connetion().prepareStatement(querty);
                statement.setString(1, txtNombreCliente.getText());
                statement.setString(2, txtApellidoCliente.getText());
                statement.setString(3, txtNitCliente.getText());
                statement.setString(4, txtDireccionCliente.getText());
                statement.setString(5, txtCorreoCliente.getText());
                statement.setString(6, txtTelCliente.getText());
                statement.setString(7, txtObservacionesCliente.getText());
                statement.executeUpdate();
                
            /*    ResultSet r = statement.executeQuery();
                String respuesta="";
                while (r.next()) {                    
                    respuesta = r.getString(1).toString();
                }
              */  
                JOptionPane.showMessageDialog(null, "Cliente ingresado correctamente");
                limpiarCampos();
                bloquearBotones();
                btnNuevoCliente.setEnabled(true);

            } catch (SQLException e) {
                System.out.println(e.getMessage() + e);
                JOptionPane.showMessageDialog(null, "Insercion no exitosa!", "Error", JOptionPane.ERROR);
            } finally {
                try {
                    conGuardar.closeConnection();
                    System.err.println("Conexion insertar cliente cerrada");
                } catch (SQLException ex) {
                    System.err.println(ex);
                   // Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        listarDatos();
    }
    //-----------Fin Guardar--------------------------
    
    
    //------------Listar datos------------------------
    private final void listarDatos() {
        DBConnection conListar = new DBConnection();
        DefaultTableModel tableModel = new DefaultTableModel();

        tableModel.addColumn("ID");
        tableModel.addColumn("Nombre");
        tableModel.addColumn("Apellido");
        tableModel.addColumn("Nit");
        tableModel.addColumn("Direcci√≥n");
        tableModel.addColumn("Correo");
        tableModel.addColumn("Tel√©fono");
        tableModel.addColumn("Observaciones");
        tableClientes.setModel(tableModel);
        
        //        ocultamos la columna ID
        tableClientes.getColumnModel().getColumn(0).setMaxWidth(0);
        tableClientes.getColumnModel().getColumn(0).setMinWidth(0);
        tableClientes.getColumnModel().getColumn(0).setPreferredWidth(0);
        
          TableRowSorter<TableModel> ordertable = new TableRowSorter<>(tableModel);
            tableClientes.setRowSorter(ordertable);
            this.tableClientes.setModel(tableModel);

        String querty = "SELECT * FROM relopsa.clientes";
        String datos[] = new String[8];

        try {
            Statement st = conListar.connetion().createStatement();
            ResultSet rs = st.executeQuery(querty);
           
            while (rs.next()) {
                datos[0] = rs.getString(1);
                datos[1] = rs.getString(2);
                datos[2] = rs.getString(3);
                datos[3] = rs.getString(4);
                datos[4] = rs.getString(5);
                datos[5] = rs.getString(6);
                datos[6] = rs.getString(7);
                datos[7] = rs.getString(8);
                tableModel.addRow(datos);
            
                txtNumClientes.setText(Integer.toString(modelUniversal.numeroDatosTabla(tableClientes)));
            }
            tableClientes.setModel(tableModel);

        } catch (SQLException e) {
            System.out.println(e.getMessage() + e);
            JOptionPane.showMessageDialog(null, "Insercion!", "Error", JOptionPane.ERROR);
        } finally {
            try {
                conListar.closeConnection();
                System.err.println("Conexion listar clientes cerrada");
            } catch (SQLException ex) {
                Logger.getLogger(Proveedores.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    //------------Fin Fistar datos--------------------
    
    
    //-----------Editar datos-------------------------
    public void editarDatos(){
        
        DBConnection conEditar = new DBConnection();
        String querty = "UPDATE relopsa.clientes SET nombre=?, apellido=?, nit=?, direccion=?, correo=?, telefono=?, observaciones=? WHERE clientes_id=?";
        
        if(txtNombreCliente.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Ingrese Nombre", "Advertencia", JOptionPane.ERROR_MESSAGE);
            this.txtNombreCliente.requestFocus();
        }else if(txtApellidoCliente.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Ingrese Apellido", "Advertencia", JOptionPane.ERROR_MESSAGE);
            this.txtApellidoCliente.requestFocus();  
        } else {
            try {
                PreparedStatement statement = conEditar.connetion().prepareStatement(querty);
                
                statement.setString(1, txtNombreCliente.getText());
                statement.setString(2, txtApellidoCliente.getText());
                statement.setString(3, txtNitCliente.getText());
                statement.setString(4, txtDireccionCliente.getText());
                statement.setString(5, txtCorreoCliente.getText());
                statement.setString(6, txtTelCliente.getText());
                statement.setString(7, txtObservacionesCliente.getText());
                statement.setString(8, txtIdCliente.getText());
                
                statement.executeUpdate();
               // System.err.println(querty);
                JOptionPane.showMessageDialog(null, "Cliente Modificado!");
                listarDatos();
                limpiarCampos();
                bloquearBotones();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(null, "Insercion no exitosa!");
            } finally {
                try {
                    conEditar.closeConnection();
                    System.err.println("Conexion editar cliente cerrada");
                } catch (SQLException ex) {
                    Logger.getLogger(Proveedores.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    //-----------Fin editar datos---------------------
    
    //-----------Eliminar datos-----------------------
    public void eliminarDatos(){
        DBConnection conDelete = new DBConnection();
        String id = txtIdCliente.getText();
        String querty = "DELETE FROM relopsa.clientes WHERE clientes_id=?";
        
        int option = JOptionPane.showConfirmDialog(null, "Desea elminar cliente ?","Eliminar",JOptionPane.YES_NO_OPTION); 
        
        if (option == 0) {
            
            try {
                PreparedStatement statement = conDelete.connetion().prepareStatement(querty);
                statement.setString(1, id);
                statement.executeLargeUpdate();
                JOptionPane.showMessageDialog(null, "Cliente eliminado");
                limpiarCampos();
                bloquearBotones();
                btnNuevoCliente.setEnabled(true);
                listarDatos();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "No se pudo eliminar cliente");
            } finally{
                try {
                    conDelete.closeConnection();
                } catch (SQLException ex) {
                    Logger.getLogger(Proveedores.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }else {
            limpiarCampos();
            bloquearBotones();
            btnNuevoCliente.setEnabled(true);
        }
        
    }
    //----------Fin Eliminar datos
    
    
    
    
    //----------------------------------------------------------------
    private void limpiarCampos(){
        txtNombreCliente.setText("");
        txtApellidoCliente.setText("");
        txtNitCliente.setText("");
        txtDireccionCliente.setText("");
        txtCorreoCliente.setText("");
        txtTelCliente.setText("");
        txtCorreoCliente.setText("");
        txtObservacionesCliente.setText("");   
    }
    
    private void bloquearBotones(){
        
        txtNombreCliente.setEnabled(false);
        txtApellidoCliente.setEnabled(false);
        txtNitCliente.setEnabled(false);
        txtDireccionCliente.setEnabled(false);
        txtCorreoCliente.setEnabled(false);
        txtTelCliente.setEnabled(false);
        txtCorreoCliente.setEnabled(false);
        txtObservacionesCliente.setEnabled(false);
        
        btnNuevoCliente.setEnabled(true);
        btnGuardarCliente.setEnabled(false);
        btnEditarCliente.setEnabled(false);
        btnEliminarCliente.setEnabled(false);
        btnCaancelarCliente.setEnabled(false);
    }
    
    private void desbloquearBotones(){
        
        txtNombreCliente.setEnabled(true);
        txtApellidoCliente.setEnabled(true);
        txtNitCliente.setEnabled(true);
        txtDireccionCliente.setEnabled(true);
        txtCorreoCliente.setEnabled(true);
        txtTelCliente.setEnabled(true);
        txtCorreoCliente.setEnabled(true);
        txtObservacionesCliente.setEnabled(true);
        
        btnNuevoCliente.setEnabled(true);
        btnGuardarCliente.setEnabled(true);
        btnEditarCliente.setEnabled(true);
        btnEliminarCliente.setEnabled(true);
        btnCaancelarCliente.setEnabled(true);
    }
    
    public final void dobleClickTabla() {

        tableClientes.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    //System.err.println("Dos clicks");
                    desbloquearBotones();
                    btnNuevoCliente.setEnabled(false);
                    btnGuardarCliente.setEnabled(false);

                    int fila = tableClientes.getSelectedRow();
                    // System.err.println("fila: " + fila);
                    txtIdCliente.setText(tableClientes.getValueAt(fila, 0).toString());
                    txtNombreCliente.setText(tableClientes.getValueAt(fila, 1).toString());
                    txtApellidoCliente.setText(tableClientes.getValueAt(fila, 2).toString());
                    txtNitCliente.setText(tableClientes.getValueAt(fila, 3).toString());
                    txtDireccionCliente.setText(tableClientes.getValueAt(fila, 4).toString());
                    txtCorreoCliente.setText(tableClientes.getValueAt(fila, 5).toString());
                    txtTelCliente.setText(tableClientes.getValueAt(fila, 6).toString());
                    txtObservacionesCliente.setText(tableClientes.getValueAt(fila, 7).toString());
                }
            }
        });
    }
    
    private void buscar() {
        txtFiltroClientes.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(final KeyEvent e) {
                String cadena = (txtFiltroClientes.getText());
                txtFiltroClientes.setText(cadena);
                repaint();
                filtro();
            }
        });
        trsFiltro = new TableRowSorter(tableClientes.getModel());
        tableClientes.setRowSorter(trsFiltro);
    }
    
    private void filtro(){
        buttonGroupClientes.add(radioButtonNombre);
        buttonGroupClientes.add(radioButtonNit);
        int columnaABuscar = 0;
        
        if (radioButtonNombre.isSelected()) {
            columnaABuscar = 1;
        }
        if (radioButtonNit.isSelected()) {
            columnaABuscar = 3;
        }
        trsFiltro.setRowFilter(RowFilter.regexFilter(txtFiltroClientes.getText(), columnaABuscar));
    }
}
