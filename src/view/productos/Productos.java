/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.productos;

import connection.DBConnection;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.ModelUniversal;
import sun.util.calendar.BaseCalendar.Date;
import view.clientes.*;
import view.proveedor.Proveedores;
import view.usuario.Usuarios;

/**
 *
 * @author gonza
 */
public class Productos extends javax.swing.JInternalFrame {

    ModelUniversal modelUniversal = new ModelUniversal();
    private TableRowSorter trsFiltro;
    
    public Productos() {
        initComponents();
        this.setTitle("Registo de productos");
        txtIdProducto.setVisible(false);
        txtNumProducto.setEditable(false);
        txtNumProducto.requestFocus();
        txtFiltroProducto.setText("");
        txtFiltroProducto.setPrompt("buscar");
        
        jComboBoxCatProducto.addItem("- Seleccionar -");
        jComboBoxProveeProducto.addItem("- Seleccionar -");
       
        
       mostrarCategorias();
        mostrarProveedor();   
        bloquearBtn();
        listarDatos();
        dobleClickTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupProductos = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNombreProducto = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPrecioCompraProducto = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPrecioVentaProducto = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtCantidadProducto = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObservacionesProducto = new javax.swing.JTextArea();
        txtCodProducto = new javax.swing.JTextField();
        jComboBoxCatProducto = new javax.swing.JComboBox<>();
        jComboBoxProveeProducto = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        txtFechaVencimiento = new javax.swing.JTextField();
        txtIdProducto = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        btnNuevoProducto = new javax.swing.JButton();
        btnGuardarProducto = new javax.swing.JButton();
        btnEditarProducto = new javax.swing.JButton();
        btnEliminarProducto = new javax.swing.JButton();
        btnCancelarProducto = new javax.swing.JButton();
        txtFiltroProducto = new org.jdesktop.swingx.JXSearchField();
        jLabel9 = new javax.swing.JLabel();
        txtNumProducto = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableProductos = new javax.swing.JTable();
        radioButtonCodigo = new javax.swing.JRadioButton();
        radioButtonNombre = new javax.swing.JRadioButton();

        setClosable(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("CÃ³digo del producto");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(13, 8, -1, -1));

        jLabel2.setText("Nombre: ");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 8, -1, -1));

        txtNombreProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtNombreProductoFocusLost(evt);
            }
        });
        jPanel2.add(txtNombreProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 30, 220, -1));

        jLabel3.setText("Precio Compra ");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 10, -1, -1));

        txtPrecioCompraProducto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel2.add(txtPrecioCompraProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 30, 91, -1));

        jLabel4.setText("Precio Venta");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, -1, -1));

        txtPrecioVentaProducto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtPrecioVentaProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtPrecioVentaProductoFocusLost(evt);
            }
        });
        jPanel2.add(txtPrecioVentaProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 30, 79, -1));

        jLabel5.setText("Cantidad");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 10, -1, -1));

        txtCantidadProducto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCantidadProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCantidadProductoFocusLost(evt);
            }
        });
        jPanel2.add(txtCantidadProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 30, 50, -1));

        jLabel6.setText("Categoria: ");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 78, -1, -1));

        jLabel7.setText("Proveedor: ");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 78, -1, -1));

        jLabel8.setText("Observaciones: ");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 80, -1, -1));

        txtObservacionesProducto.setColumns(20);
        txtObservacionesProducto.setRows(5);
        jScrollPane1.setViewportView(txtObservacionesProducto);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 100, 410, 110));

        txtCodProducto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtCodProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCodProductoFocusLost(evt);
            }
        });
        jPanel2.add(txtCodProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 100, -1));

        jComboBoxCatProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jComboBoxCatProductoFocusLost(evt);
            }
        });
        jPanel2.add(jComboBoxCatProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 130, -1));

        jComboBoxProveeProducto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jComboBoxProveeProductoFocusLost(evt);
            }
        });
        jPanel2.add(jComboBoxProveeProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 100, 130, -1));

        jLabel10.setText("Fecha vencimiento");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 10, -1, -1));

        txtFechaVencimiento.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtFechaVencimiento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFechaVencimientoFocusLost(evt);
            }
        });
        jPanel2.add(txtFechaVencimiento, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 30, 109, -1));
        jPanel2.add(txtIdProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 165, 28, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 760, 220));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnNuevoProducto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/buttonNuevo.png"))); // NOI18N
        btnNuevoProducto.setBorder(null);
        btnNuevoProducto.setBorderPainted(false);
        btnNuevoProducto.setContentAreaFilled(false);
        btnNuevoProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoProductoActionPerformed(evt);
            }
        });
        jPanel3.add(btnNuevoProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        btnGuardarProducto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/buttonGuardar.png"))); // NOI18N
        btnGuardarProducto.setBorder(null);
        btnGuardarProducto.setBorderPainted(false);
        btnGuardarProducto.setContentAreaFilled(false);
        btnGuardarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarProductoActionPerformed(evt);
            }
        });
        jPanel3.add(btnGuardarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 10, -1, -1));

        btnEditarProducto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/buttonModificar.png"))); // NOI18N
        btnEditarProducto.setBorder(null);
        btnEditarProducto.setBorderPainted(false);
        btnEditarProducto.setContentAreaFilled(false);
        btnEditarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarProductoActionPerformed(evt);
            }
        });
        jPanel3.add(btnEditarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 10, -1, 30));

        btnEliminarProducto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/buttonEliminar.png"))); // NOI18N
        btnEliminarProducto.setBorder(null);
        btnEliminarProducto.setBorderPainted(false);
        btnEliminarProducto.setContentAreaFilled(false);
        btnEliminarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarProductoActionPerformed(evt);
            }
        });
        jPanel3.add(btnEliminarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 10, -1, -1));

        btnCancelarProducto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/buttonCancelar.png"))); // NOI18N
        btnCancelarProducto.setBorder(null);
        btnCancelarProducto.setBorderPainted(false);
        btnCancelarProducto.setContentAreaFilled(false);
        btnCancelarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarProductoActionPerformed(evt);
            }
        });
        jPanel3.add(btnCancelarProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(610, 10, -1, -1));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 240, 760, 50));

        txtFiltroProducto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtFiltroProducto.setText("Buscar");
        txtFiltroProducto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFiltroProductoKeyTyped(evt);
            }
        });
        jPanel1.add(txtFiltroProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 302, 210, 30));

        jLabel9.setText("Cantidad de productos:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 310, -1, -1));

        txtNumProducto.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel1.add(txtNumProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 306, 30, -1));

        tableProductos = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        tableProductos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableProductos.setFocusable(false);
        jScrollPane2.setViewportView(tableProductos);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 340, 760, 210));

        radioButtonCodigo.setText("CÃ³digo");
        jPanel1.add(radioButtonCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 308, -1, 20));

        radioButtonNombre.setText("Nombre");
        jPanel1.add(radioButtonNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 308, -1, 20));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoProductoActionPerformed
        desbloquerBtn();
        btnNuevoProducto.setEnabled(false);
        btnEditarProducto.setEnabled(false);
        btnEliminarProducto.setEnabled(false);
        txtCodProducto.setText("001");
        txtPrecioCompraProducto.setText("0.00");
        txtPrecioVentaProducto.setText("0.00");
        txtCodProducto.requestFocus();
      //  txtFechaVencimiento.setText("AAAA-MM-DD");
    }//GEN-LAST:event_btnNuevoProductoActionPerformed

    private void btnCancelarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarProductoActionPerformed
       limpiarCampos();
       bloquearBtn();
       txtNumProducto.requestFocus();
    }//GEN-LAST:event_btnCancelarProductoActionPerformed

    private void btnGuardarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarProductoActionPerformed
        guardarProducto();
    }//GEN-LAST:event_btnGuardarProductoActionPerformed

    private void txtCantidadProductoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCantidadProductoFocusLost
        if (txtCantidadProducto.getText().equals("")) {
             txtCantidadProducto.setText("0");
        }
    }//GEN-LAST:event_txtCantidadProductoFocusLost

    private void txtPrecioVentaProductoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPrecioVentaProductoFocusLost
       double precioCompra = Double.parseDouble(txtPrecioCompraProducto.getText());
        double precioVenta = Double.parseDouble(txtPrecioVentaProducto.getText());
        if(precioVenta < precioCompra){
         JOptionPane.showMessageDialog(null, "El precio de venta es menor que el precio de compra ");
         txtPrecioVentaProducto.requestFocus();
        }
    }//GEN-LAST:event_txtPrecioVentaProductoFocusLost

    private void txtCodProductoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCodProductoFocusLost
        modelUniversal.validarDatosRepetidos(txtCodProducto, tableProductos, 1, "Codigo");
       // txtNombreProducto.requestFocus();
    }//GEN-LAST:event_txtCodProductoFocusLost

    private void txtNombreProductoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtNombreProductoFocusLost
        modelUniversal.validarDatosRepetidos(txtNombreProducto, tableProductos, 2, "Nombre");
        //txtPrecioCompraProducto.requestFocus();
    }//GEN-LAST:event_txtNombreProductoFocusLost

    private void btnEditarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarProductoActionPerformed
        editarDatos();
    }//GEN-LAST:event_btnEditarProductoActionPerformed

    private void btnEliminarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarProductoActionPerformed
        eliminarDatos();
    }//GEN-LAST:event_btnEliminarProductoActionPerformed

    private void txtFiltroProductoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroProductoKeyTyped
        buscar();
    }//GEN-LAST:event_txtFiltroProductoKeyTyped

    private void txtFechaVencimientoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFechaVencimientoFocusLost
     //   jComboBoxCatProducto.requestFocus();
    }//GEN-LAST:event_txtFechaVencimientoFocusLost

    private void jComboBoxCatProductoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBoxCatProductoFocusLost
      //  jComboBoxProveeProducto.requestFocus();
    }//GEN-LAST:event_jComboBoxCatProductoFocusLost

    private void jComboBoxProveeProductoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBoxProveeProductoFocusLost
      // txtObservacionesProducto.requestFocus();
    }//GEN-LAST:event_jComboBoxProveeProductoFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelarProducto;
    private javax.swing.JButton btnEditarProducto;
    private javax.swing.JButton btnEliminarProducto;
    private javax.swing.JButton btnGuardarProducto;
    private javax.swing.JButton btnNuevoProducto;
    private javax.swing.ButtonGroup buttonGroupProductos;
    private javax.swing.JComboBox<String> jComboBoxCatProducto;
    private javax.swing.JComboBox<String> jComboBoxProveeProducto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton radioButtonCodigo;
    private javax.swing.JRadioButton radioButtonNombre;
    private javax.swing.JTable tableProductos;
    private javax.swing.JTextField txtCantidadProducto;
    private javax.swing.JTextField txtCodProducto;
    private javax.swing.JTextField txtFechaVencimiento;
    private org.jdesktop.swingx.JXSearchField txtFiltroProducto;
    private javax.swing.JTextField txtIdProducto;
    private javax.swing.JTextField txtNombreProducto;
    private javax.swing.JTextField txtNumProducto;
    private javax.swing.JTextArea txtObservacionesProducto;
    private javax.swing.JTextField txtPrecioCompraProducto;
    private javax.swing.JTextField txtPrecioVentaProducto;
    // End of variables declaration//GEN-END:variables

    private void guardarProducto(){       
        DBConnection conGuardar = new DBConnection();
      
        if (txtCodProducto.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Ingrese Codigo para el producto", "Advertencia", JOptionPane.ERROR_MESSAGE);
            this.txtCodProducto.requestFocus();
        } else if (txtNombreProducto.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Ingrese nombre del producto", "Advertencia", JOptionPane.ERROR_MESSAGE);
            this.txtNombreProducto.requestFocus();
        } else if (txtPrecioCompraProducto.getText().equals("0.00") || txtPrecioCompraProducto.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Precio de compra no puede ser 0", "Advertencia", JOptionPane.ERROR_MESSAGE);
            txtPrecioCompraProducto.requestFocus();
        } else if (txtPrecioVentaProducto.getText().equals("0.00") || txtPrecioVentaProducto.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Ingrese precio de venta", "Advertencia", JOptionPane.ERROR_MESSAGE);
            txtPrecioVentaProducto.requestFocus();
        } /*else if (txtCantidadProducto.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Ingrese cantidad", "Advertencia", JOptionPane.ERROR_MESSAGE);
            txtCantidadProducto.requestFocus();
        }*/ else if (jComboBoxCatProducto.getSelectedItem().toString().equals("- Seleccionar -")) {
            JOptionPane.showMessageDialog(null, "Seleccione categoria", "Advertencia", JOptionPane.ERROR_MESSAGE);
            jComboBoxCatProducto.requestFocus();
        } else if (jComboBoxProveeProducto.getSelectedItem().toString().equals("- Seleccionar -")) {
            JOptionPane.showMessageDialog(null, "Seleccione proveedor", "Advertencia", JOptionPane.ERROR_MESSAGE);
            jComboBoxProveeProducto.requestFocus();
        } else { 
            try {
             //   String fecha_vencimiento = " STR_TO_DATE(REPLACE('"+txtFechaVencimiento.getText()+"','/','.'), GET_FORMAT(date,'EUR')) ";
                        //"STR_TO_DATE(REPLACE('"+txtFechaVencimiento.getText()+"','/','.'), GET_FORMAT(date,'USA'))";
                        
                 
                 String querty = "insert into productos(codigo, nombre, precio_compra, precio_venta, cantidad, fecha_vencimiento, categorias_id, proveedores_id, observaciones) "
                        + "values (?,?,?,?,?,STR_TO_DATE(REPLACE(?,'/','.'), GET_FORMAT(date,'EUR')),?,?,?)";
                
                PreparedStatement statement = conGuardar.connetion().prepareStatement(querty);
                
                statement.setString(1, txtCodProducto.getText());
                statement.setString(2, txtNombreProducto.getText());
                statement.setDouble(3, Double.parseDouble(txtPrecioCompraProducto.getText()));
                statement.setDouble(4, Double.parseDouble(txtPrecioVentaProducto.getText()));
                statement.setInt(5, Integer.parseInt(txtCantidadProducto.getText()));
                statement.setString(6, txtFechaVencimiento.getText());
                statement.setInt(7, jComboBoxCatProducto.getSelectedIndex());
                statement.setInt(8, jComboBoxProveeProducto.getSelectedIndex());
                statement.setString(9, txtObservacionesProducto.getText());
                statement.executeUpdate();
                
            /*    ResultSet r = statement.executeQuery();
                String respuesta="";
                while (r.next()) {                    
                    respuesta = r.getString(1).toString();
                }
              */  
                JOptionPane.showMessageDialog(null, "Producto ingresado correctamente");
                limpiarCampos();
                bloquearBtn();
                btnNuevoProducto.setEnabled(true);

            } catch (SQLException e) {
                System.out.println(e.getMessage() + e);
                JOptionPane.showMessageDialog(null, "Insercion no exitosa!", "Error", JOptionPane.ERROR);
            } finally {
                try {
                    conGuardar.closeConnection();
                    System.err.println("Conexion insertar producto cerrada");
                } catch (SQLException ex) {
                    System.err.println(ex);
                   // Logger.getLogger(Clientes.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        listarDatos();
    }
    
    
    //------------Listar datos------------------------
    private final void listarDatos() {
        DBConnection conListar = new DBConnection();
        DefaultTableModel tableModel = new DefaultTableModel();

        tableModel.addColumn("ID");
        tableModel.addColumn("Codigo");
        tableModel.addColumn("Nombre");
        tableModel.addColumn("Precio compra");
        tableModel.addColumn("Precio Venta");
        tableModel.addColumn("Stock");
        tableModel.addColumn("Fecha vencimiento");
        tableModel.addColumn("Categoria");
        tableModel.addColumn("Proveedor");
        tableModel.addColumn("Observaciones");
        tableProductos.setModel(tableModel);
        
        //        ocultamos la columna ID
        tableProductos.getColumnModel().getColumn(0).setMaxWidth(0);
        tableProductos.getColumnModel().getColumn(0).setMinWidth(0);
        tableProductos.getColumnModel().getColumn(0).setPreferredWidth(0);
        
          TableRowSorter<TableModel> ordertable = new TableRowSorter<>(tableModel);
            tableProductos.setRowSorter(ordertable);
            this.tableProductos.setModel(tableModel);

        String querty = "SELECT * FROM relopsa.productos";
        String sql = "select productos_id, productos.codigo, productos.nombre, precio_compra, precio_venta, cantidad, DATE_FORMAT(fecha_vencimiento, '%d/%m/%y'), categorias.nombre, proveedores.nombre, productos.observaciones from productos " +
                     "INNER JOIN categorias ON productos.categorias_id=categorias.categorias_id " +
                     "INNER JOIN proveedores ON productos.proveedores_id=proveedores.proveedores_id;";
        String datos[] = new String[10];

        try {
            Statement st = conListar.connetion().createStatement();
            ResultSet rs = st.executeQuery(sql);
           
            while (rs.next()) {
                datos[0] = rs.getString(1);
                datos[1] = rs.getString(2);
                datos[2] = rs.getString(3);
                datos[3] = rs.getString(4);
                datos[4] = rs.getString(5);
                datos[5] = rs.getString(6);
                datos[6] = rs.getString(7);
                datos[7] = rs.getString(8);
                datos[8] = rs.getString(9);
                datos[9] = rs.getString(10);
                tableModel.addRow(datos);
            
                txtNumProducto.setText(Integer.toString(modelUniversal.numeroDatosTabla(tableProductos)));
            }
            tableProductos.setModel(tableModel);

        } catch (SQLException e) {
            System.out.println(e.getMessage() + e);
            JOptionPane.showMessageDialog(null, "Insercion!", "Error", JOptionPane.ERROR);
        } finally {
            try {
                conListar.closeConnection();
                System.err.println("Conexion listar productos cerrada");
            } catch (SQLException ex) {
                Logger.getLogger(Productos.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    //------------Fin Fistar datos--------------------
    
    
     //-----------Editar datos-------------------------
    public void editarDatos(){
        
        DBConnection conEditar = new DBConnection();
        String querty = "UPDATE relopsa.productos SET codigo=?, nombre=?, precio_compra=?, precio_venta=?, "
                + "cantidad=?, fecha_vencimiento=?, categorias_id=?, proveedores_id=?, observaciones=? WHERE productos_id=?";
        
        if (txtCodProducto.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Ingrese Codigo para el producto", "Advertencia", JOptionPane.ERROR_MESSAGE);
            this.txtCodProducto.requestFocus();
        } else if (txtNombreProducto.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Ingrese nombre del producto", "Advertencia", JOptionPane.ERROR_MESSAGE);
            this.txtNombreProducto.requestFocus();
        } else if (txtPrecioCompraProducto.getText().equals("0.00") || txtPrecioCompraProducto.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Precio de compra no puede ser 0", "Advertencia", JOptionPane.ERROR_MESSAGE);
            txtPrecioCompraProducto.requestFocus();
        } else if (txtPrecioVentaProducto.getText().equals("0.00") || txtPrecioVentaProducto.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Ingrese precio de venta", "Advertencia", JOptionPane.ERROR_MESSAGE);
            txtPrecioVentaProducto.requestFocus();
        } /*else if (txtCantidadProducto.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Ingrese cantidad", "Advertencia", JOptionPane.ERROR_MESSAGE);
            txtCantidadProducto.requestFocus();
        }*/ else if (jComboBoxCatProducto.getSelectedItem().toString().equals("- Seleccionar -")) {
            JOptionPane.showMessageDialog(null, "Seleccione categoria", "Advertencia", JOptionPane.ERROR_MESSAGE);
            jComboBoxCatProducto.requestFocus();
        } else if (jComboBoxProveeProducto.getSelectedItem().toString().equals("- Seleccionar -")) {
            JOptionPane.showMessageDialog(null, "Seleccione proveedor", "Advertencia", JOptionPane.ERROR_MESSAGE);
            jComboBoxProveeProducto.requestFocus();
        }  else {
            try {
                PreparedStatement statement = conEditar.connetion().prepareStatement(querty);
                
                statement.setString(1, txtCodProducto.getText());
                statement.setString(2, txtNombreProducto.getText());
                statement.setDouble(3, Double.parseDouble(txtPrecioCompraProducto.getText()));
                statement.setDouble(4, Double.parseDouble(txtPrecioVentaProducto.getText()));
                statement.setInt(5, Integer.parseInt(txtCantidadProducto.getText()));
                statement.setString(6, txtFechaVencimiento.getText());
                statement.setInt(7, jComboBoxCatProducto.getSelectedIndex());
                statement.setInt(8, jComboBoxProveeProducto.getSelectedIndex());
                statement.setString(9, txtObservacionesProducto.getText());
                statement.setString(10, txtIdProducto.getText());
                
                statement.executeUpdate();
               // System.err.println(querty);
                JOptionPane.showMessageDialog(null, "Producto Modificado!");
                listarDatos();
                limpiarCampos();
                bloquearBtn();
            } catch (SQLException e) {
                System.out.println(e.getMessage());
                JOptionPane.showMessageDialog(null, "Insercion no exitosa!");
            } finally {
                try {
                    conEditar.closeConnection();
                    System.err.println("Conexion editar producto cerrada");
                } catch (SQLException ex) {
                    Logger.getLogger(Proveedores.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }
    //-----------Fin editar datos---------------------
    
    
     //-----------Eliminar datos-----------------------
    public void eliminarDatos(){
        DBConnection conDelete = new DBConnection();
        String id = txtIdProducto.getText();
        String querty = "DELETE FROM relopsa.productos WHERE productos_id=?";
        
        int producto = Integer.parseInt(txtCantidadProducto.getText());
        if(producto != 0){
            JOptionPane.showMessageDialog(null, "No se puede elimnar porque hay producto en stock","Advertencia",JOptionPane.ERROR_MESSAGE);
        }else{
        int option = JOptionPane.showConfirmDialog(null, "Desea elminar producto ?","Eliminar",JOptionPane.YES_NO_OPTION); 
        
        if (option == 0) {
            
            try {
                PreparedStatement statement = conDelete.connetion().prepareStatement(querty);
                statement.setString(1, id);
                statement.executeLargeUpdate();
                JOptionPane.showMessageDialog(null, "Producto eliminado");
                limpiarCampos();
                bloquearBtn();
                btnNuevoProducto.setEnabled(true);
                listarDatos();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "No se pudo eliminar producto");
            } finally{
                try {
                    conDelete.closeConnection();
                } catch (SQLException ex) {
                    Logger.getLogger(Proveedores.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }else {
            limpiarCampos();
            bloquearBtn();
            btnNuevoProducto.setEnabled(true);
        }
        }
    }
    //----------Fin Eliminar datos
    
    
    
 //----------------------------------------------------------------------------
    private void mostrarCategorias(){
        DBConnection conCat = new DBConnection();
        String querty = "select * from categorias";
        try {
            Statement statement = conCat.connetion().createStatement();
            ResultSet r = statement.executeQuery(querty);
            while (r.next()) {
                jComboBoxCatProducto.addItem(r.getString("nombre"));
            }
        } catch (SQLException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }
    
    private void mostrarProveedor(){
        DBConnection conCat = new DBConnection();
        String querty = "select * from proveedores";
        try {
            Statement statement = conCat.connetion().createStatement();
            ResultSet r = statement.executeQuery(querty);
            while (r.next()) {
                jComboBoxProveeProducto.addItem(r.getString("nombre"));
            }
        } catch (SQLException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }
    
    private void limpiarCampos(){
        
        txtCodProducto.setText("");
        txtNombreProducto.setText("");
        txtPrecioCompraProducto.setText("");
        txtPrecioVentaProducto.setText("");
        txtCantidadProducto.setText("");
        txtFechaVencimiento.setText("");
        txtObservacionesProducto.setText("");
        jComboBoxCatProducto.setSelectedIndex(0);
        jComboBoxProveeProducto.setSelectedIndex(0);
    }
    
    private void bloquearBtn(){
        txtCodProducto.setEnabled(false);
        txtNombreProducto.setEnabled(false);
        txtPrecioCompraProducto.setEnabled(false);
        txtPrecioVentaProducto.setEnabled(false);
        txtCantidadProducto.setEnabled(false);
        txtFechaVencimiento.setEnabled(false);
        txtObservacionesProducto.setEnabled(false);
        jComboBoxCatProducto.setEnabled(false);
        jComboBoxProveeProducto.setEnabled(false);
        
        btnNuevoProducto.setEnabled(true);
        btnGuardarProducto.setEnabled(false);
        btnEditarProducto.setEnabled(false);
        btnEliminarProducto.setEnabled(false);
        btnCancelarProducto.setEnabled(false);
    }

    private void desbloquerBtn() {
        txtCodProducto.setEnabled(true);
        txtNombreProducto.setEnabled(true);
        txtPrecioCompraProducto.setEnabled(true);
        txtPrecioVentaProducto.setEnabled(true);
        txtCantidadProducto.setEnabled(true);
        txtFechaVencimiento.setEnabled(true);
        txtObservacionesProducto.setEnabled(true);
        jComboBoxCatProducto.setEnabled(true);
        jComboBoxProveeProducto.setEnabled(true);
        
        btnNuevoProducto.setEnabled(true);
        btnGuardarProducto.setEnabled(true);
        btnEditarProducto.setEnabled(true);
        btnEliminarProducto.setEnabled(true);
        btnCancelarProducto.setEnabled(true);
    }
    
    public final void dobleClickTabla() {

        tableProductos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    //System.err.println("Dos clicks");
                    desbloquerBtn();
                    btnNuevoProducto.setEnabled(false);
                    btnGuardarProducto.setEnabled(false);

                    int fila = tableProductos.getSelectedRow();
                    // System.err.println("fila: " + fila);
                    txtIdProducto.setText(tableProductos.getValueAt(fila, 0).toString());
                    txtCodProducto.setText(tableProductos.getValueAt(fila, 1).toString());
                    txtNombreProducto.setText(tableProductos.getValueAt(fila, 2).toString());
                    txtPrecioCompraProducto.setText(tableProductos.getValueAt(fila, 3).toString());
                    txtPrecioVentaProducto.setText(tableProductos.getValueAt(fila, 4).toString());
                    txtCantidadProducto.setText(tableProductos.getValueAt(fila, 5).toString());
                    txtFechaVencimiento.setText(tableProductos.getValueAt(fila, 6).toString());
                 
                    jComboBoxCatProducto.setSelectedItem(tableProductos.getValueAt(fila, 7).toString());
                    jComboBoxProveeProducto.setSelectedItem(tableProductos.getValueAt(fila, 8).toString());
                     txtObservacionesProducto.setText(tableProductos.getValueAt(fila, 9).toString());
                }
                txtObservacionesProducto.requestFocus();
            }
        });
    }
    
     private void buscar() {
        txtFiltroProducto.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(final KeyEvent e) {
                String cadena = (txtFiltroProducto.getText());
                txtFiltroProducto.setText(cadena);
                repaint();
                filtro();
            }
        });
        trsFiltro = new TableRowSorter(tableProductos.getModel());
        tableProductos.setRowSorter(trsFiltro);
    }
    
    private void filtro(){
        buttonGroupProductos.add(radioButtonNombre);
        buttonGroupProductos.add(radioButtonCodigo);
        int columnaABuscar = 0;
        
        if (radioButtonCodigo.isSelected()) {
            columnaABuscar = 1;
        }
        if (radioButtonNombre.isSelected()) {
            columnaABuscar = 2;
        }
        trsFiltro.setRowFilter(RowFilter.regexFilter(txtFiltroProducto.getText(), columnaABuscar));
    }   
}
